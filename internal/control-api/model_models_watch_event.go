/*
Nexodus API

This is the Nexodus API Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package control_api

import (
	"encoding/json"
)

// checks if the ModelsWatchEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsWatchEvent{}

// ModelsWatchEvent struct for ModelsWatchEvent
type ModelsWatchEvent struct {
	Kind  *string                `json:"kind,omitempty"`
	Type  *string                `json:"type,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewModelsWatchEvent instantiates a new ModelsWatchEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsWatchEvent() *ModelsWatchEvent {
	this := ModelsWatchEvent{}
	return &this
}

// NewModelsWatchEventWithDefaults instantiates a new ModelsWatchEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsWatchEventWithDefaults() *ModelsWatchEvent {
	this := ModelsWatchEvent{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ModelsWatchEvent) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWatchEvent) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ModelsWatchEvent) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ModelsWatchEvent) SetKind(v string) {
	o.Kind = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ModelsWatchEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWatchEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ModelsWatchEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ModelsWatchEvent) SetType(v string) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelsWatchEvent) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsWatchEvent) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelsWatchEvent) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ModelsWatchEvent) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o ModelsWatchEvent) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsWatchEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableModelsWatchEvent struct {
	value *ModelsWatchEvent
	isSet bool
}

func (v NullableModelsWatchEvent) Get() *ModelsWatchEvent {
	return v.value
}

func (v *NullableModelsWatchEvent) Set(val *ModelsWatchEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsWatchEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsWatchEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsWatchEvent(val *ModelsWatchEvent) *NullableModelsWatchEvent {
	return &NullableModelsWatchEvent{value: val, isSet: true}
}

func (v NullableModelsWatchEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsWatchEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
