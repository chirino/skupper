/*
Nexodus API

This is the Nexodus API Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package control_api

import (
	"encoding/json"
)

// checks if the ModelsUserInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsUserInfoResponse{}

// ModelsUserInfoResponse struct for ModelsUserInfoResponse
type ModelsUserInfoResponse struct {
	FamilyName        *string `json:"family_name,omitempty"`
	GivenName         *string `json:"given_name,omitempty"`
	Picture           *string `json:"picture,omitempty"`
	PreferredUsername *string `json:"preferred_username,omitempty"`
	Sub               *string `json:"sub,omitempty"`
	UpdatedAt         *int32  `json:"updated_at,omitempty"`
}

// NewModelsUserInfoResponse instantiates a new ModelsUserInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsUserInfoResponse() *ModelsUserInfoResponse {
	this := ModelsUserInfoResponse{}
	return &this
}

// NewModelsUserInfoResponseWithDefaults instantiates a new ModelsUserInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsUserInfoResponseWithDefaults() *ModelsUserInfoResponse {
	this := ModelsUserInfoResponse{}
	return &this
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise.
func (o *ModelsUserInfoResponse) GetFamilyName() string {
	if o == nil || IsNil(o.FamilyName) {
		var ret string
		return ret
	}
	return *o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserInfoResponse) GetFamilyNameOk() (*string, bool) {
	if o == nil || IsNil(o.FamilyName) {
		return nil, false
	}
	return o.FamilyName, true
}

// HasFamilyName returns a boolean if a field has been set.
func (o *ModelsUserInfoResponse) HasFamilyName() bool {
	if o != nil && !IsNil(o.FamilyName) {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given string and assigns it to the FamilyName field.
func (o *ModelsUserInfoResponse) SetFamilyName(v string) {
	o.FamilyName = &v
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *ModelsUserInfoResponse) GetGivenName() string {
	if o == nil || IsNil(o.GivenName) {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserInfoResponse) GetGivenNameOk() (*string, bool) {
	if o == nil || IsNil(o.GivenName) {
		return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *ModelsUserInfoResponse) HasGivenName() bool {
	if o != nil && !IsNil(o.GivenName) {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *ModelsUserInfoResponse) SetGivenName(v string) {
	o.GivenName = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise.
func (o *ModelsUserInfoResponse) GetPicture() string {
	if o == nil || IsNil(o.Picture) {
		var ret string
		return ret
	}
	return *o.Picture
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserInfoResponse) GetPictureOk() (*string, bool) {
	if o == nil || IsNil(o.Picture) {
		return nil, false
	}
	return o.Picture, true
}

// HasPicture returns a boolean if a field has been set.
func (o *ModelsUserInfoResponse) HasPicture() bool {
	if o != nil && !IsNil(o.Picture) {
		return true
	}

	return false
}

// SetPicture gets a reference to the given string and assigns it to the Picture field.
func (o *ModelsUserInfoResponse) SetPicture(v string) {
	o.Picture = &v
}

// GetPreferredUsername returns the PreferredUsername field value if set, zero value otherwise.
func (o *ModelsUserInfoResponse) GetPreferredUsername() string {
	if o == nil || IsNil(o.PreferredUsername) {
		var ret string
		return ret
	}
	return *o.PreferredUsername
}

// GetPreferredUsernameOk returns a tuple with the PreferredUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserInfoResponse) GetPreferredUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredUsername) {
		return nil, false
	}
	return o.PreferredUsername, true
}

// HasPreferredUsername returns a boolean if a field has been set.
func (o *ModelsUserInfoResponse) HasPreferredUsername() bool {
	if o != nil && !IsNil(o.PreferredUsername) {
		return true
	}

	return false
}

// SetPreferredUsername gets a reference to the given string and assigns it to the PreferredUsername field.
func (o *ModelsUserInfoResponse) SetPreferredUsername(v string) {
	o.PreferredUsername = &v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *ModelsUserInfoResponse) GetSub() string {
	if o == nil || IsNil(o.Sub) {
		var ret string
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserInfoResponse) GetSubOk() (*string, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *ModelsUserInfoResponse) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given string and assigns it to the Sub field.
func (o *ModelsUserInfoResponse) SetSub(v string) {
	o.Sub = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ModelsUserInfoResponse) GetUpdatedAt() int32 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int32
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserInfoResponse) GetUpdatedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ModelsUserInfoResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int32 and assigns it to the UpdatedAt field.
func (o *ModelsUserInfoResponse) SetUpdatedAt(v int32) {
	o.UpdatedAt = &v
}

func (o ModelsUserInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsUserInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FamilyName) {
		toSerialize["family_name"] = o.FamilyName
	}
	if !IsNil(o.GivenName) {
		toSerialize["given_name"] = o.GivenName
	}
	if !IsNil(o.Picture) {
		toSerialize["picture"] = o.Picture
	}
	if !IsNil(o.PreferredUsername) {
		toSerialize["preferred_username"] = o.PreferredUsername
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableModelsUserInfoResponse struct {
	value *ModelsUserInfoResponse
	isSet bool
}

func (v NullableModelsUserInfoResponse) Get() *ModelsUserInfoResponse {
	return v.value
}

func (v *NullableModelsUserInfoResponse) Set(val *ModelsUserInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsUserInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsUserInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsUserInfoResponse(val *ModelsUserInfoResponse) *NullableModelsUserInfoResponse {
	return &NullableModelsUserInfoResponse{value: val, isSet: true}
}

func (v NullableModelsUserInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsUserInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
