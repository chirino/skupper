/*
Nexodus API

This is the Nexodus API Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package control_api

import (
	"encoding/json"
)

// checks if the ModelsCertificateSigningRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsCertificateSigningRequest{}

// ModelsCertificateSigningRequest struct for ModelsCertificateSigningRequest
type ModelsCertificateSigningRequest struct {
	// Requested 'duration' (i.e. lifetime) of the Certificate. Note that the issuer may choose to ignore the requested duration, just like any other requested attribute. +optional
	Duration *string `json:"duration,omitempty"`
	// Requested basic constraints isCA value. Note that the issuer may choose to ignore the requested isCA value, just like any other requested attribute.  NOTE: If the CSR in the `Request` field has a BasicConstraints extension, it must have the same isCA value as specified here.  If true, this will automatically add the `cert sign` usage to the list of requested `usages`. +optional
	IsCa *bool `json:"is_ca,omitempty"`
	// The PEM-encoded X.509 certificate signing request to be submitted to the issuer for signing.  If the CSR has a BasicConstraints extension, its isCA attribute must match the `isCA` value of this CertificateRequest. If the CSR has a KeyUsage extension, its key usages must match the key usages in the `usages` field of this CertificateRequest. If the CSR has a ExtKeyUsage extension, its extended key usages must match the extended key usages in the `usages` field of this CertificateRequest.
	Request *string `json:"request,omitempty"`
	// Requested key usages and extended key usages.  NOTE: If the CSR in the `Request` field has uses the KeyUsage or ExtKeyUsage extension, these extensions must have the same values as specified here without any additional values.  If unset, defaults to `digital signature` and `key encipherment`. +optional
	Usages []ModelsKeyUsage `json:"usages,omitempty"`
}

// NewModelsCertificateSigningRequest instantiates a new ModelsCertificateSigningRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCertificateSigningRequest() *ModelsCertificateSigningRequest {
	this := ModelsCertificateSigningRequest{}
	return &this
}

// NewModelsCertificateSigningRequestWithDefaults instantiates a new ModelsCertificateSigningRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCertificateSigningRequestWithDefaults() *ModelsCertificateSigningRequest {
	this := ModelsCertificateSigningRequest{}
	return &this
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *ModelsCertificateSigningRequest) GetDuration() string {
	if o == nil || IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateSigningRequest) GetDurationOk() (*string, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *ModelsCertificateSigningRequest) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *ModelsCertificateSigningRequest) SetDuration(v string) {
	o.Duration = &v
}

// GetIsCa returns the IsCa field value if set, zero value otherwise.
func (o *ModelsCertificateSigningRequest) GetIsCa() bool {
	if o == nil || IsNil(o.IsCa) {
		var ret bool
		return ret
	}
	return *o.IsCa
}

// GetIsCaOk returns a tuple with the IsCa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateSigningRequest) GetIsCaOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCa) {
		return nil, false
	}
	return o.IsCa, true
}

// HasIsCa returns a boolean if a field has been set.
func (o *ModelsCertificateSigningRequest) HasIsCa() bool {
	if o != nil && !IsNil(o.IsCa) {
		return true
	}

	return false
}

// SetIsCa gets a reference to the given bool and assigns it to the IsCa field.
func (o *ModelsCertificateSigningRequest) SetIsCa(v bool) {
	o.IsCa = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *ModelsCertificateSigningRequest) GetRequest() string {
	if o == nil || IsNil(o.Request) {
		var ret string
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateSigningRequest) GetRequestOk() (*string, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *ModelsCertificateSigningRequest) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given string and assigns it to the Request field.
func (o *ModelsCertificateSigningRequest) SetRequest(v string) {
	o.Request = &v
}

// GetUsages returns the Usages field value if set, zero value otherwise.
func (o *ModelsCertificateSigningRequest) GetUsages() []ModelsKeyUsage {
	if o == nil || IsNil(o.Usages) {
		var ret []ModelsKeyUsage
		return ret
	}
	return o.Usages
}

// GetUsagesOk returns a tuple with the Usages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCertificateSigningRequest) GetUsagesOk() ([]ModelsKeyUsage, bool) {
	if o == nil || IsNil(o.Usages) {
		return nil, false
	}
	return o.Usages, true
}

// HasUsages returns a boolean if a field has been set.
func (o *ModelsCertificateSigningRequest) HasUsages() bool {
	if o != nil && !IsNil(o.Usages) {
		return true
	}

	return false
}

// SetUsages gets a reference to the given []ModelsKeyUsage and assigns it to the Usages field.
func (o *ModelsCertificateSigningRequest) SetUsages(v []ModelsKeyUsage) {
	o.Usages = v
}

func (o ModelsCertificateSigningRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsCertificateSigningRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.IsCa) {
		toSerialize["is_ca"] = o.IsCa
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.Usages) {
		toSerialize["usages"] = o.Usages
	}
	return toSerialize, nil
}

type NullableModelsCertificateSigningRequest struct {
	value *ModelsCertificateSigningRequest
	isSet bool
}

func (v NullableModelsCertificateSigningRequest) Get() *ModelsCertificateSigningRequest {
	return v.value
}

func (v *NullableModelsCertificateSigningRequest) Set(val *ModelsCertificateSigningRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCertificateSigningRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCertificateSigningRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCertificateSigningRequest(val *ModelsCertificateSigningRequest) *NullableModelsCertificateSigningRequest {
	return &NullableModelsCertificateSigningRequest{value: val, isSet: true}
}

func (v NullableModelsCertificateSigningRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCertificateSigningRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
