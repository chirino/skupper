/*
Nexodus API

This is the Nexodus API Server.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package control_api

import (
	"encoding/json"
)

// checks if the ModelsDeviceMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsDeviceMetadata{}

// ModelsDeviceMetadata struct for ModelsDeviceMetadata
type ModelsDeviceMetadata struct {
	DeviceId *string                `json:"device_id,omitempty"`
	Key      *string                `json:"key,omitempty"`
	Revision *int32                 `json:"revision,omitempty"`
	Value    map[string]interface{} `json:"value,omitempty"`
}

// NewModelsDeviceMetadata instantiates a new ModelsDeviceMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsDeviceMetadata() *ModelsDeviceMetadata {
	this := ModelsDeviceMetadata{}
	return &this
}

// NewModelsDeviceMetadataWithDefaults instantiates a new ModelsDeviceMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsDeviceMetadataWithDefaults() *ModelsDeviceMetadata {
	this := ModelsDeviceMetadata{}
	return &this
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *ModelsDeviceMetadata) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDeviceMetadata) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *ModelsDeviceMetadata) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *ModelsDeviceMetadata) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ModelsDeviceMetadata) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDeviceMetadata) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ModelsDeviceMetadata) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ModelsDeviceMetadata) SetKey(v string) {
	o.Key = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *ModelsDeviceMetadata) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDeviceMetadata) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *ModelsDeviceMetadata) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *ModelsDeviceMetadata) SetRevision(v int32) {
	o.Revision = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ModelsDeviceMetadata) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDeviceMetadata) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ModelsDeviceMetadata) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *ModelsDeviceMetadata) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o ModelsDeviceMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsDeviceMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableModelsDeviceMetadata struct {
	value *ModelsDeviceMetadata
	isSet bool
}

func (v NullableModelsDeviceMetadata) Get() *ModelsDeviceMetadata {
	return v.value
}

func (v *NullableModelsDeviceMetadata) Set(val *ModelsDeviceMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsDeviceMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsDeviceMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsDeviceMetadata(val *ModelsDeviceMetadata) *NullableModelsDeviceMetadata {
	return &NullableModelsDeviceMetadata{value: val, isSet: true}
}

func (v NullableModelsDeviceMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsDeviceMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
